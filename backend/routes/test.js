const express = require("express");
const { exec } = require("child_process");
const path = require("path");
const { broadcastMessage, setProcess } = require("../websocket/wsServer");
const {
  pullTracesFile,
  checkANRFromFileAndSave,
} = require("../tests/utils/anrUtils");
const {
  streamGrowthExperimentLogs,
} = require("../tests/utils/growthbookUtils");
const { spawn } = require("child_process");



const router = express.Router();
let testProcess = null;

// Start any test by path
router.post("/start", (req, res) => {
  
  if (testProcess) {
    return res.status(400).json({success: false, message: "‚ö†Ô∏è A test is already running" });
  }

  const scriptPath = req.body?.script;
  if (!scriptPath) {
    return res.status(400).json({success: false, message: "‚ùå No script specified" });
  }

  const resolvedScript = path.resolve(__dirname, "../", scriptPath);
  testProcess = spawn("node", [resolvedScript]);

  setProcess(testProcess);

  testProcess.stdout.on("data", (data) => {
    const cleanLines = data
  .toString()
  .split("\n")
  .filter((line) => {
    const trimmed = line.trim();
    return (
      trimmed.startsWith("‚úÖ") ||
      trimmed.startsWith("‚ùå") ||
      trimmed.startsWith("‚ñ∂") ||
      trimmed.startsWith("‚õî") ||
      trimmed.startsWith("üì¢") ||
      trimmed.startsWith("üß™") ||
      trimmed.startsWith("‚ö†Ô∏è") ||
      trimmed.startsWith("üîÅ") ||
      trimmed.startsWith("üè†") ||
      trimmed.startsWith("üü¢") ||
      trimmed.startsWith("üìã")
    );
  });

    cleanLines.forEach((line) => broadcastMessage(`üì¢ ${line}`));
  });

  testProcess.stderr.on("data", (error) => {
    const formatted = error.toString().trim();
    console.error("üî¥ STDERR:", formatted);
    // broadcastMessage(`‚ùå Script Error Output:\n${formatted}`);
  });

  // üåü Start logcat watcher for experiment logs
  logcatStream = streamGrowthExperimentLogs((logLine) => {
    broadcastMessage(`üß™ ${logLine}`);
  });

  testProcess.on("exit", async (code) => {
    const testName = path.basename(scriptPath).replace(".js", "");

    pullTracesFile((err, tracePath) => {
      if (err) {
        // broadcastMessage("‚ö†Ô∏è Could not pull ANR traces");
      } else {
        const hasAnr = checkANRFromFileAndSave(
          tracePath,
          "com.binogi",
          testName,
        );
        if (hasAnr) {
          broadcastMessage(
            `‚ùå ANR Detected! Saved to logs/anr-traces/${testName}-<timestamp>.txt`,
          );
        } else {
          broadcastMessage(`‚úÖ Test finished with exit code ${code}`);
        }
      }
      // üßº Kill logcat stream when test ends
      if (logcatStream) {
        logcatStream.kill();
        logcatStream = null;
      }

      testProcess = null;
      setProcess(null);
    });
  });

  res.json({success: true, message: `üöÄ Started test: ${scriptPath}` });
});

// Stop currently running test
router.post("/stop", (req, res) => {
  if (!testProcess) {
    return res.status(400).json({success: false, message: "‚ö†Ô∏è No test is running" });
  }

  testProcess.kill("SIGTERM");
  testProcess = null;
  setProcess(null);
  broadcastMessage("‚õî Test stopped by user.");
  res.json({success: true, message: "‚õî Test Stopped" });
});

module.exports = router;
